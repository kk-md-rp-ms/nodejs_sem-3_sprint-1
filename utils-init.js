// Import required functions/variables from built-in modules
const { extname } = require("node:path");

// Import required functions/variables from custom modules
const logEE = require("./log-emitter");
const {
  folderStructureSet,
  fileContentMap,
  notFoundMessage,
  initHelpFilePath,
} = require("./defaults");

const { fetchTxtFile, createFolder, createFile } = require("./utils-fs");

// Functions to process the init option "--help"
const processInitHelp = async (optionsArr) => {
  // Check if there are extra arguments after "--help"
  if (optionsArr.length) {
    // Provide feedback
    console.log("Invalid syntax");

    // Write log to the file
    logEE.logToFile("processInitHelp", "warning", "Invalid syntax");
    return;
  }

  // Read the help text from the specified file
  const data = (await fetchTxtFile(initHelpFilePath)) || notFoundMessage;

  // Display result
  console.log(data);

  // Write log to the file
  data !== notFoundMessage
    ? logEE.logToFile("processInitHelp", "success", `"help" file was displayed`)
    : logEE.logToFile("processInitHelp", "error", `"help" file not found`);
};

// Functions to process the init option "--all"
const processInitAll = async (optionsArr) => {
  // Check if there are extra arguments after "--all"
  if (optionsArr.length) {
    // Provide feedback
    console.log("Invalid syntax");

    // Write log to the file
    logEE.logToFile("processInitAll", "warning", "Invalid syntax");
    return;
  }

  await processInitMk([]);
  await processInitCat([]);
};

// Functions to process the init option "--mk"
const processInitMk = async (optionsArr) => {
  // Check if there are extra arguments after "--mk"
  if (optionsArr.length) {
    // Provide feedback
    console.log("Invalid syntax");

    // Write log to the file
    logEE.logToFile("processInitMk", "warning", "Invalid syntax");
    return;
  }

  // Initialize variables to track the status of folder creation and feedback message
  let logStatusFlag = false;
  let feedbackMessage;

  try {
    // Counter to keep track of the number of folders created
    let folderCount = 0;

    // Iterate over the "folderStructureSet" set to create folders
    for (const item of folderStructureSet) {
      folderCount += (await createFolder(item)) || 0;
    }

    // Set the feedbackMessage and logStatusFlag
    feedbackMessage = folderCount
      ? `Success. ${folderCount} out of ${folderStructureSet.size} folders were created.`
      : `Success. All folders already existed in the system.`;

    if (folderCount && folderStructureSet.size - folderCount > 0) {
      feedbackMessage += ` The other ${
        folderStructureSet.size - folderCount
      } either generated by the system or existed before.`;
    }

    logStatusFlag = true;
  } catch (err) {
    // If an error occurs during folder creation, capture the error message
    feedbackMessage = err.message;
  }

  // Provide feedback
  console.log(feedbackMessage);

  // Write log to the file
  logEE.logToFile(
    "processInitMk",
    logStatusFlag ? "success" : "error",
    feedbackMessage
  );
};

// Functions to process the init option "--cat"
const processInitCat = async (optionsArr) => {
  // Check if there are extra arguments after "--cat"
  if (optionsArr.length) {
    // Provide feedback
    console.log("Invalid syntax");

    // Write log to the file
    logEE.logToFile("processInitCat", "warning", "Invalid syntax");
    return;
  }

  // Initialize variables to track the status of file creation and feedback message
  let logStatusFlag = false;
  let feedbackMessage;

  try {
    // Counter to keep track of the number of files created
    let fileCount = 0;

    // Iterate over the "fileContentMap" to create files
    for (const [path, content] of fileContentMap) {
      let processedContent =
        extname(path) === ".json" ? JSON.stringify(content, null, 2) : content;

      fileCount += (await createFile(processedContent, path)) || 0;
    }

    // Set the feedbackMessage and logStatusFlag
    feedbackMessage = `Success. ${fileCount} out of ${fileContentMap.size} files were created.`;

    logStatusFlag = true;
  } catch (err) {
    // If an error occurs during file creation, capture the error message
    feedbackMessage = err.message;
  }

  // Provide feedback
  console.log(feedbackMessage);

  // Write log to the file
  logEE.logToFile(
    "processInitCat",
    logStatusFlag ? "success" : "error",
    feedbackMessage
  );
};

// Export all the defined variables for use in other modules
module.exports = {
  processInitHelp,
  processInitAll,
  processInitMk,
  processInitCat,
};
